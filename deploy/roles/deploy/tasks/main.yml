---

- name: Release id
  shell: 'date +%Y%m%d%H%M%S'
  register: release_id

- name: Generate ports
  debug: msg="do something"
  with_sequence: start=8000 end={{ 8000 + (app_instance - 1) }}
  register: apps_port

- name: Set fact port
  set_fact: ports="{{ apps_port.results | map(attribute='item') | list }}"

- name: Set fact env
  set_fact: env="{{ hostvars[inventory_hostname]['env'] }}"

- name: Copy env file
  copy: src=env.{{ env }} dest=/etc/app.{{ env }}.cfg mode=0644 owner=root group=root

- name: Create release dir
  file: path=/opt/app/{{ release_id.stdout }} state=directory mode=0755 owner={{ app_user}} group={{ app_group }}

- name: Create config info
  template: src=config.json dest=/opt/app/{{ release_id.stdout }}/config.json mode=0755 owner={{ app_user}} group={{ app_group }}

- name: Copy app bin file
  copy: src=app dest=/opt/app/{{ release_id.stdout }}/ owner={{ app_user}} group={{ app_group }} force=yes mode=a+x

- include: test.yml

- name: Create symlink to new app
  file: src=/opt/app/{{ release_id.stdout }}/app dest=/usr/local/bin/app state=link force=yes

- name: Generate systemd config
  template: src=app.service dest=/etc/systemd/system/app-{{ item }}.service mode=0644 owner=root group=root
  with_items: "{{ ports }}"

- name: Start apps
  systemd: state=started daemon_reload=yes name=app-{{ item }}.service
  with_items: "{{ ports }}"

- block:
    - name: Get JSON stats
      uri: url="http://127.0.0.1:{{ item }}/stats" return_content=yes method=GET status_code=200 body_format=json
      with_items: "{{ ports }}"
    - name: Set fact rollback False
      set_fact: status="False"
  rescue:
    - name: Set fact rollback True
      set_fact: status="True"
  tags: ['ls']

- name: Get previous
  command: bash -c "ls /opt/app/ | sort | tail -1 | head -1"
  register: pre_version
  when: status == "True"

- name: Get previous config
  shell: "cat /opt/app/{{ item }}/config.json"
  with_items: "{{ pre_version.stdout_lines }}"
  register: pre_config
  when: status == "True"

- name: Create symlink to new app
  file: src=/opt/app/{{ item }}/app dest=/usr/local/bin/app state=link force=yes
  with_items: "{{ pre_version.stdout_lines }}"
  when: status == "True"

- name: Generate systemd config
  template: src=app.service dest=/etc/systemd/system/app-{{ item }}.service mode=0644 owner=root group=root
  with_items: "{{ pre_config.results }}"
  when: status == "True"

- name: Start apps
  systemd: state=started daemon_reload=yes name=app-{{ item }}.service
  with_items: "{{ pre_config.results }}"
  when: status == "True"

- name: Generate nginx config
  template: src=nginx.app dest=/etc/nginx/conf.d/app.conf mode=0644 owner=root group=root

- name: Reload nginx
  service: name=nginx state=reloaded
